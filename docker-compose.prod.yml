services:
  web-client:
    build:
      context: .
      dockerfile: apps/web-client/Dockerfile.prod
    ports:
      - "${WEB_CLIENT_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
    env_file:
      - .env.prod
    restart: unless-stopped

  backend-api:
    build:
      context: .
      dockerfile: apps/backend-api/Dockerfile.prod
      target: production
    ports:
      - "${BACKEND_API_PORT:-3001}:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    env_file:
      - .env.prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app-network

  database:
    image: postgres:18-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-app_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
