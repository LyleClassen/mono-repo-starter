services:
  web-client:
    build:
      context: .
      dockerfile: apps/web-client/Dockerfile.dev
    ports:
      - "${WEB_CLIENT_PORT:-3000}:3000"
    volumes:
      - ./apps/web-client:/app/apps/web-client
      - /app/apps/web-client/node_modules
      - /app/node_modules
    environment:
      - NODE_ENV=development
    env_file:
      - .env.dev
    stdin_open: true
    tty: true

  backend-api:
    build:
      context: .
      dockerfile: apps/backend-api/Dockerfile.dev
    ports:
      - "${BACKEND_API_PORT:-3001}:3001"
    volumes:
      - ./apps/backend-api:/app/apps/backend-api
      - /app/apps/backend-api/node_modules
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3001
    env_file:
      - .env.dev
    stdin_open: true
    tty: true
    depends_on:
      - database
    networks:
      - app-network

  database:
    image: postgres:18-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-app_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
