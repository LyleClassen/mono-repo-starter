FROM node:22-alpine AS base

# Install pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

# Stage 1: Dependencies
FROM base AS dependencies

WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml* pnpm-workspace.yaml ./
COPY apps/backend-api/package.json ./apps/backend-api/
COPY packages/database/package.json ./packages/database/

# Install all dependencies (including devDependencies for build)
RUN pnpm install --frozen-lockfile

# Stage 2: Build
FROM base AS build

WORKDIR /app

# Copy dependencies from previous stage
COPY --from=dependencies /app/node_modules ./node_modules
COPY --from=dependencies /app/apps/backend-api/node_modules ./apps/backend-api/node_modules
COPY --from=dependencies /app/packages/database/node_modules ./packages/database/node_modules

# Copy source code
COPY apps/backend-api ./apps/backend-api
COPY packages/database ./packages/database

# Build database package
RUN pnpm --filter @repo/database build

# Build TypeScript
RUN pnpm --filter @mono-repo-starter/backend-api build

# Generate OpenAPI spec
RUN pnpm --filter @mono-repo-starter/backend-api generate:openapi

# Stage 3: Production dependencies
FROM base AS prod-dependencies

WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml* pnpm-workspace.yaml ./
COPY apps/backend-api/package.json ./apps/backend-api/
COPY packages/database/package.json ./packages/database/

# Install only production dependencies
RUN pnpm install --frozen-lockfile --prod

# Stage 4: Production
FROM base AS production

WORKDIR /app

# Copy production dependencies
COPY --from=prod-dependencies /app/node_modules ./node_modules
COPY --from=prod-dependencies /app/apps/backend-api/node_modules ./apps/backend-api/node_modules
COPY --from=prod-dependencies /app/packages/database/node_modules ./packages/database/node_modules

# Copy built application
COPY --from=build /app/apps/backend-api/dist ./apps/backend-api/dist
COPY --from=build /app/apps/backend-api/openapi ./apps/backend-api/openapi
COPY apps/backend-api/package.json ./apps/backend-api/

# Copy database package for migrations
COPY --from=build /app/packages/database ./packages/database
COPY packages/database/package.json ./packages/database/

# Set environment
ENV NODE_ENV=production
ENV PORT=3001

# Expose port
EXPOSE 3001

# Create entrypoint script
COPY apps/backend-api/docker-entrypoint.prod.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Use non-root user
USER node

ENTRYPOINT ["/docker-entrypoint.sh"]
